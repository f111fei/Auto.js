apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.stardust.auojs.inrt"
        minSdkVersion 27
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        ndk {
            abiFilters "armeabi", "armeabi-v7a"
        }


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

def buildApkPluginForAbi(File pluginProjectDir, String abi) {
    copy {
        from file('..\\app\\release\\')
        into new File(pluginProjectDir, 'app\\src\\main\\assets')
        def fileName = "inrt-" + abi + "-release.apk"
        include fileName
        rename fileName, 'template.apk'
    }
    exec {
        workingDir pluginProjectDir
        commandLine 'gradlew.bat', 'assembleRelease'
    }
    copy {
        from new File(pluginProjectDir, 'app\\build\\outputs\\apk\\release')
        into file('..\\common\\release')
        def fileName = '打包插件-' + versions.appVersionName + '-release.apk'
        include fileName
        rename fileName, '打包插件-' + abi + '-' + versions.appVersionName + '-release.apk'
    }
}

task buildApkPlugin {
    doLast {
        def pluginProjectDirPath = '..\\..\\AutoJsApkBuilderPlugin'
        def pluginProjectDir = file(pluginProjectDirPath)
        if (!pluginProjectDir.exists() || !pluginProjectDir.isDirectory()) {
            println 'pluginProjectDir not exists'
            return
        }
        buildApkPluginForAbi(pluginProjectDir, 'armeabi-v7a')
        buildApkPluginForAbi(pluginProjectDir, 'x86')
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        task.finalizedBy 'buildApkPlugin'
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    google()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'


    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.navigation:navigation-fragment:2.1.0'
    implementation 'androidx.navigation:navigation-ui:2.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'

    //Glide
    implementation('com.github.bumptech.glide:glide:4.2.0', {
        exclude group: 'com.android.support'
    })


    api(name: 'libtermexec-release', ext: 'aar')
    api(name: 'emulatorview-release', ext: 'aar')
    api(name: 'term-debug', ext: 'aar')
    api(name: 'opencv-3.4.3', ext: 'aar')

    //implementation 'com.github.f111fei.auto:automator:1.0.1'
    //implementation 'com.github.f111fei.auto:common:1.0.1'
    //implementation 'com.github.f111fei.auto:autojs:1.0.1'
    api project(':common')
    api project(':automator')
    api project(':autojs')
}

